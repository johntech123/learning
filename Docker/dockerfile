java: 

FROM OpenJDK:17
WPORKDIR /app
COPY target/my-app.jar /app
RUN mvn clean install
exopse 8080
cmd ["java", -"-jar" "my-app.jar"] 


python:

FROM python:latest
WORKDIR /app
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt
COPY . .
EXPOSE 90
CMD ["python", "app.py"]
  

multi-stage-docker-file:

# --- Stage 1: Build the application ---
FROM node:18 AS build
WORKDIR /app
COPY package.json package-lock.json ./
RUN npm clean install
COPY . .
RUN npm run build
  
# --- Stage 2: Serve the built app using NGINX ---
FROM nginx:latest
COPY --from=build /app/build /usr/share/nginx/html
EXPOSE 80
CMD ["nginx", "-g", "daemon off;"]

node.js dockerfile:

FROM node:18
WORKDIR /app
COPY package.json package-lock.json ./
RUN npm clean install
COPY . .
EXPOSE 3000
CMD ["node", "app.js"]

nginx dockerfile:










INTERVIEW:
1) IMAGE is created now how would you create 5 container

docker run -d -p 8080:80 --name demo-container-1 new-image /bin/bash
docker run -d -p 8080:80 --name demo-container-2 new-image /bin/bash
docker run -d -p 8080:80 --name demo-container-3 new-image /bin/bash
docker run -d -p 8080:80 --name demo-container-4 new-image /bin/bash
docker run -d -p 8080:80 --name demo-container-5 new-image /bin/bash

2)how would you deploy your container/run the container

docker run -it -p 8080:80 --name demo-container-1 new-image /bin/bash  

3) how would you list the container 

docker ps 
docker ps -a

4)how do you check the container ip

docker inspect <container-name> | grep -i IPADDRESS  or 
kubectl get pod -o wide                     both command give you ip of container

5) how would you access your containing containing web application

first make sure container port is exposed
docker run -d -p 8080:80 --name container-jio my-image 
check port forwarding with docker ps 
PORTS
0.0.0.0:8080->80/tcp
then access it with localhost http://localhost:8080






