apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-app-deployment
spec:
  replicas: 3
  selector:
    matchLabels:
      app: my-app
  template:
    metadata:
      labels:
        app: my-app
    spec:
      containers:
        - name: my-app-container
          image: my-app-image:latest  # Replace with your container image
          ports:
            - containerPort: 8080
          startupProbe:
            httpGet:
              path: /healthz             # HTTP endpoint to check startup (its a common http endpoint we define in our app that resturn 200 OK when app is healthy
              port: 8080                 # Port on which the container is running
            initialDelaySeconds: 10       # Delay before starting the probe (allow app to initialize)
            periodSeconds: 5             # Period between subsequent checks
            failureThreshold: 30         # Number of consecutive failures before considering the container failed
            timeoutSeconds: 2            # Timeout for the probe to respond
          livenessProbe:
            httpGet:
              path: /healthz             # Path to check for liveness
              port: 8080                 # Port for liveness probe
            initialDelaySeconds: 5       # Delay before the first liveness probe
            periodSeconds: 10            # Period to check the liveness
            failureThreshold: 3          # Threshold for failure
            timeoutSeconds: 2            # Timeout for the probe to respond
          readinessProbe:
            httpGet:
              path: /readiness           # Path to check for readiness
              port: 8080                 # Port for readiness probe
            initialDelaySeconds: 5       # Delay before readiness probe starts
            periodSeconds: 10            # Period to check readiness
            failureThreshold: 3          # Threshold for failure
            timeoutSeconds: 2            # Timeout for the probe to respond 2 sec responce ka wait karna 


how does health check works under the hood

your kubelet read the pod specification wait for initial delay sec and send http request directly to container ip with localhost and container should return the responce ass 200 OK
200-399 ok success
400 fail 
then it will restart the pod 

same for readiness but if prob fails kubelet doesnt restart the pod but stop the traffic to that pod until it became healthy

